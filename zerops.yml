zerops:
  - setup: nodejs20
    build:
      os: alpine
      base: nodejs@20
      prepareCommands:
        - npm install -g typescript
      buildCommands:
        - |
          cd nodejs
          export NODE_ENV=development
          npm i
          npm run build
      deploy:
        - ./nodejs/~/dist
        - ./nodejs/~/node_modules
        - ./nodejs/~/package.json
    run:
      os: alpine
      base: nodejs@20
      start: npm run start:prod
      healthCheck:
        httpGet:
          port: 3000
          path: /status

  - setup: golang1
    build:
      os: alpine
      base: go@1
      buildCommands:
        - |
          cd golang
          go build -o golang ./...
      deploy:
        - ./golang/~/golang
    run:
      os: alpine
      base: golang@latest
      start: ./golang
      healthCheck:
        httpGet:
          port: 8080
          path: /status

  - setup: phpapache81
    build:
      os: alpine
      base: php@8.1
      buildCommands:
        - |
          cd php
          composer install --optimize-autoloader --no-dev
      deploy:
        - ./php/~/index.php
        - ./php/~/.htaccess
        - ./php/~/vendor
        - ./php/~/apache.conf.tmpl
    run:
      os: alpine
      base: php-apache@8.1
      siteConfigPath: apache.conf.tmpl
      documentRoot: ./
      healthCheck:
        httpGet:
          port: 80
          path: /status

  - setup: phpapache83
    build:
      os: alpine
      base: php@8.3
      buildCommands:
        - |
          cd php
          composer install --optimize-autoloader --no-dev
          ls -laR
      deploy:
        - ./php/~/index.php
        - ./php/~/.htaccess
        - ./php/~/vendor
        - ./php/~/apache.conf.tmpl
    run:
      os: ubuntu
      base: php-apache@8.3
      siteConfigPath: apache.conf.tmpl
      documentRoot:
      healthCheck:
        httpGet:
          port: 80
          path: /status

  - setup: phpnginx81
    build:
      os: alpine
      base: php@8.1
      buildCommands:
        - |
          cd php
          composer install --optimize-autoloader --no-dev
      deploy:
        - ./php/~/index.php
        - ./php/~/vendor
        - ./php/~/nginx_8.1.conf.tmpl
    run:
      os: alpine
      base: php-nginx@8.1
      siteConfigPath: nginx_8.1.conf.tmpl
      healthCheck:
        httpGet:
          port: 80
          path: /status

  - setup: phpnginx83
    build:
      os: ubuntu
      base: php@8.3
      buildCommands:
        - |
          cd php
          composer install --optimize-autoloader --no-dev
      deploy:
        - ./php/~/index.php
        - ./php/~/vendor
        - ./php/~/nginx_8.3.conf.tmpl
    run:
      os: ubuntu
      base: php-nginx@latest
      siteConfigPath: nginx_8.3.conf.tmpl
      healthCheck:
        httpGet:
          port: 80
          path: /status

  - setup: nginx
    build:
      os: alpine
      base: alpine@latest
      buildCommands:
        - echo noop
      deploy:
        - ./nginx/~/index.html
        - ./nginx/~/index8081.html
        - ./nginx/~/nginx.conf.tmpl
    run:
      os: alpine
      base: nginx@latest
      siteConfigPath: nginx.conf.tmpl
      ports:
        - port: 80
          httpSupport: true
        - port: 8081
          httpSupport: true

  - setup: rust1
    build:
      os: alpine
      base: rust@latest
      buildCommands:
        - |
          zsc noop
          cd rust
          cargo build --release
      deploy:
        - ./rust/target/release/~/rust
    run:
      os: alpine
      base: rust@latest
      start: ./rust
      healthCheck:
        httpGet:
          port: 8080
          path: /status

  - setup: dotnet60
    build:
      os: alpine
      base: dotnet@6
      buildCommands:
        - |
          cd dotnet
          dotnet publish -c Release -o publish
      deploy:
        - ./dotnet/publish/~
    run:
      os: alpine
      base: dotnet@6
      start: dotnet ./dotnet.dll
      healthCheck:
        httpGet:
          port: 5000
          path: /status

  - setup: python311
    build:
      os: alpine
      base: python@3.11
      deploy:
        - python/~app.py
      addToRunPrepare:
        - python/requirements.txt
    run:
      os: alpine
      base: python@3.11
      prepareCommands:
        - "env"
        - "apk add --no-cache --virtual .build-deps libpq-dev gcc musl-dev postgresql-dev"
        - "python3 -m pip install --ignore-installed -r python/requirements.txt"
        - "apk --purge del .build-deps"
      initCommands:
        - "env"
      start: python3 app.py
      healthCheck:
        httpGet:
          port: 8000
          path: /status

